
bool damage_machine(double param_1,fz::machine *machine)

{
  float fVar1;
  float fVar2;
  bool bVar3;
  
  if ((machine->frames_until_restored != 0) || (machine->breakdown_frame_counter != 0)) {
    return false;
  }
  fVar1 = (float)(param_1 * (double)machine->stat_body);
  if (((machine->machine_state & FZ_MS_B10) == 0) && (FLOAT_20 < fVar1)) {
    fVar1 = FLOAT_20;
  }
  fVar2 = FLOAT_1.01 *
          (float)((double)CONCAT44(0x43300000,(uint)machine->max_energy) - 0x4330000000000000);
  if (fVar2 < fVar1) {
    fVar1 = fVar2;
  }
  machine->damage_from_last_hit = fVar1;
  fVar1 = machine->energy - machine->damage_from_last_hit;
  bVar3 = fVar1 < FLOAT_0;
  machine->energy = fVar1;
  if (bVar3) {
    if ((machine->machine_state & (FZ_MS_COMPLETEDRACE_1_Q|FZ_MS_0HP)) == 0) {
      bVar3 = true;
      machine->breakdown_frame_counter = 0x3c;
    }
    else {
      bVar3 = false;
    }
    fVar1 = FLOAT_0;
    machine->machine_state = machine->machine_state | FZ_MS_0HP;
    machine->energy = fVar1;
    machine->base_speed = fVar1;
    return bVar3;
  }
  return false;
}

double scale_collision_impulse_and_damage(fz::machine *machine,int other_machine_b10)

{
  float fVar1;
  fz::machine_state_e uVar2;
  double dVar2;
  
  uVar2 = machine->machine_state;
  dVar2 = (double)FLOAT_1;
  if ((uVar2 & (FZ_MS_SPINATTACKING|FZ_MS_SIDEATTACKING)) == FZ_MS_NONE) {
    if ((uVar2 & FZ_MS_B10) != FZ_MS_NONE) {
      dVar2 = (double)(float)(dVar2 * (double)FLOAT_0.8);
    }
  }
  else if ((uVar2 & FZ_MS_B10) == FZ_MS_NONE) {
    fVar1 = FLOAT_0.5 +
            FLOAT_0.5 *
            (float)((double)CONCAT44(0x43300000,(uint)machine->spinattack_angle_decrement) -
                   0x4330000000000000) * FLOAT_0.00024414062;
    if (other_machine_b10 == 0) {
      if ((uVar2 & FZ_MS_SPINATTACKING) == FZ_MS_NONE) {
        dVar2 = (double)(float)(dVar2 * (double)FLOAT_2);
      }
      else {
        dVar2 = (double)(float)(dVar2 * (double)(FLOAT_3 * fVar1));
      }
    }
    else if ((uVar2 & FZ_MS_SPINATTACKING) == FZ_MS_NONE) {
      dVar2 = (double)(float)(dVar2 * (double)FLOAT_6);
    }
    else {
      dVar2 = (double)(float)(dVar2 * (double)(FLOAT_5 * fVar1));
    }
  }
  else if ((uVar2 & FZ_MS_SPINATTACKING) == FZ_MS_NONE) {
    dVar2 = (double)(float)(dVar2 * (double)FLOAT_4);
  }
  else {
    dVar2 = (double)(float)(dVar2 * (double)FLOAT_3.5);
  }
  return dVar2;
}


double prepare_impact_direction_info
                 (fz::machine *param_1,unk_collision_struct *param_2,vec3 *param_3)

{
  float fVar1;
  double dVar2;
  double dVar3;
  double dVar4;
  double in_f31;
  double in_ps31_1;
  float fVar5;
  float fVar6;
  float local_res4;
  float local_40;
  float local_38;
  float local_34;
  float local_30;
  float fStack_2c;
  float fStack_28;
  float local_24;
  float local_20;
  float local_1c;
  float local_18;
  float local_14;
  float fStack_8;
  float fStack_4;
  
  fStack_8 = (float)in_f31;
  fStack_4 = (float)in_ps31_1;
  mtxa_push();
  copy_mtx_to_mtxa(&param_1->basis_physical);
  mtxa.origin_x = (param_1->position_current).x;
  mtxa.origin_y = (param_1->position_current).y;
  mtxa.origin_z = (param_1->position_current).z;
  mtxa_world_to_local(param_3,&param_2->relative_dir_local);
  mtxa_inverse_rotate_vec3(&param_1->track_surface_normal,(vec3 *)&stack0xffffffd4);
  (param_2->relative_dir_local).x = (param_2->relative_dir_local).x - fStack_2c;
  (param_2->relative_dir_local).y = (param_2->relative_dir_local).y - fStack_28;
  (param_2->relative_dir_local).z = (param_2->relative_dir_local).z - local_24;
  fVar6 = (param_2->relative_dir_local).x;
  fVar1 = (param_2->relative_dir_local).y;
  fVar5 = (param_2->relative_dir_local).z;
  fVar5 = math_sqrt(fVar5 * fVar5 + fVar1 * fVar1 + fVar6 * fVar6);
  fVar1 = FLOAT_NEG_1;
  fVar6 = FLOAT_0;
  if (fVar5 <= FLOAT_EPSILON) {
    (param_2->relative_dir_local).x = FLOAT_0;
    (param_2->relative_dir_local).y = fVar6;
    (param_2->relative_dir_local).z = fVar1;
  }
  else {
    get_length_and_normalize(&param_2->relative_dir_local);
  }
  fVar5 = FLOAT_0;
  fVar6 = (param_2->relative_dir_local).x;
  fVar1 = (param_2->relative_dir_local).z;
  dVar2 = DOUBLE_0.05 * ABS((double)(param_2->relative_dir_local).y);
  param_2->impact_axis_z = FLOAT_0;
  dVar4 = (double)ABS(fVar6);
  dVar3 = (double)(float)dVar2;
  dVar2 = (double)ABS(fVar1);
  if (dVar4 <= dVar3) {
    if (dVar3 <= dVar2) {
      fVar6 = (param_2->relative_dir_local).z;
      (param_2->relative_dir_world).x = fVar5;
      (param_2->relative_dir_world).y = fVar5;
      (param_2->relative_dir_world).z = fVar6;
      param_2->impact_axis_z = (param_2->relative_dir_local).z;
    }
    else {
      fVar6 = (param_2->relative_dir_local).y;
      (param_2->relative_dir_world).x = fVar5;
      (param_2->relative_dir_world).y = fVar6;
      (param_2->relative_dir_world).z = fVar5;
      dVar2 = dVar3;
    }
  }
  else if (dVar4 <= dVar2) {
    fVar6 = (param_2->relative_dir_local).z;
    (param_2->relative_dir_world).x = fVar5;
    (param_2->relative_dir_world).y = fVar5;
    (param_2->relative_dir_world).z = fVar6;
    param_2->impact_axis_z = (param_2->relative_dir_local).z;
  }
  else {
    (param_2->relative_dir_world).x = (param_2->relative_dir_local).x;
    (param_2->relative_dir_world).y = fVar5;
    (param_2->relative_dir_world).z = fVar5;
    dVar2 = dVar4;
  }
  get_length_and_normalize(&param_2->relative_dir_world);
  fVar6 = (param_1->velocity).x;
  if (((((uint)fVar6 & 0x7f800000) == 0x7f800000) ||
      (fVar1 = (param_1->velocity).y, ((uint)fVar1 & 0x7f800000) == 0x7f800000)) ||
     (fVar5 = (param_1->velocity).z, ((uint)fVar5 & 0x7f800000) == 0x7f800000)) {
    param_2->speed_per_mass = FLOAT_0;
  }
  else {
    fVar6 = math_sqrt(fVar5 * fVar5 + fVar1 * fVar1 + fVar6 * fVar6);
    param_2->speed_per_mass = fVar6 / param_1->stat_weight;
  }
  mtxa_rotate_vec3(&param_2->relative_dir_world,&param_2->relative_dir_world);
  mtxa_pop();
  return (double)(float)ABS(dVar2);
}




undefined4 g_handle_machine_v_machine_collision(fz::machine *machine_1,fz::machine *machine_2)

{
  float fVar1;
  float fVar2;
  bool bVar3;
  bool bVar4;
  undefined4 g_ret_collided;
  bool bVar5;
  bool bVar6;
  bool bVar7;
  uint uVar8;
  double in_f17;
  double in_f18;
  double dVar9;
  double dVar10;
  double in_f19;
  double dVar11;
  double dVar12;
  double in_f20;
  double in_f21;
  double in_f22;
  double in_f23;
  double in_f24;
  double dVar13;
  double in_f25;
  double dVar14;
  double in_f26;
  double in_f27;
  double in_f28;
  double in_f29;
  double in_f30;
  double in_f31;
  double in_ps17_1;
  double in_ps18_1;
  double in_ps19_1;
  double in_ps20_1;
  double in_ps21_1;
  double in_ps22_1;
  double in_ps23_1;
  double in_ps24_1;
  double in_ps25_1;
  double in_ps26_1;
  double in_ps27_1;
  double in_ps28_1;
  double in_ps29_1;
  double in_ps30_1;
  double in_ps31_1;
  float fVar15;
  uint local_238;
  float hit_t;
  vec3 local_230;
  vec3 vStack_224;
  float local_218;
  float local_214;
  float local_210;
  vec3 local_20c;
  vec3 vStack_200;
  vec3 local_1f4;
  vec3 local_1e8;
  vec3 vStack_1dc;
  vec3 local_1d0;
  vec3 local_1c4;
  vec3 sweep_p0_b;
  vec3 sweep_p0_a;
  vec3 local_1a0;
  vec3 local_194;
  unk_collision_struct uStack_188;
  unk_collision_struct uStack_150;
  float fStack_e8;
  float fStack_e4;
  float fStack_d8;
  float fStack_d4;
  float fStack_c8;
  float fStack_c4;
  float fStack_b8;
  float fStack_b4;
  float fStack_a8;
  float fStack_a4;
  float fStack_98;
  float fStack_94;
  float fStack_88;
  float fStack_84;
  float fStack_78;
  float fStack_74;
  float fStack_68;
  float fStack_64;
  float fStack_58;
  float fStack_54;
  float fStack_48;
  float fStack_44;
  float fStack_38;
  float fStack_34;
  float fStack_28;
  float fStack_24;
  float fStack_18;
  float fStack_14;
  float fStack_8;
  float fStack_4;
  
  fStack_8 = (float)in_f31;
  fStack_4 = (float)in_ps31_1;
  fStack_18 = (float)in_f30;
  fStack_14 = (float)in_ps30_1;
  fStack_28 = (float)in_f29;
  fStack_24 = (float)in_ps29_1;
  fStack_38 = (float)in_f28;
  fStack_34 = (float)in_ps28_1;
  fStack_48 = (float)in_f27;
  fStack_44 = (float)in_ps27_1;
  fStack_58 = (float)in_f26;
  fStack_54 = (float)in_ps26_1;
  fStack_68 = (float)in_f25;
  fStack_64 = (float)in_ps25_1;
  fStack_78 = (float)in_f24;
  fStack_74 = (float)in_ps24_1;
  fStack_88 = (float)in_f23;
  fStack_84 = (float)in_ps23_1;
  fStack_98 = (float)in_f22;
  fStack_94 = (float)in_ps22_1;
  fStack_a8 = (float)in_f21;
  fStack_a4 = (float)in_ps21_1;
  fStack_b8 = (float)in_f20;
  fStack_b4 = (float)in_ps20_1;
  fStack_c8 = (float)in_f19;
  fStack_c4 = (float)in_ps19_1;
  fStack_d8 = (float)in_f18;
  fStack_d4 = (float)in_ps18_1;
  fStack_e8 = (float)in_f17;
  fStack_e4 = (float)in_ps17_1;
  _savegpr_24();
  if (((machine_1->state_2 | machine_2->state_2) & 0x10) == 0) {
    if ((machine_1->machine_state & FZ_MS_B30) == 0) {
                    /* const_float_2.0 is never set to any value but 2.0?
                       why is this a part of the machine struct? */
      fVar15 = machine_1->const_float_2.0;
      fVar1 = machine_1->stat_weight;
    }
    else {
      fVar15 = FLOAT_1;
      if (machine_1->machine_id < 2) {
                    /* if machine_id = 1, the float that gets grabbed is 1.5f */
        fVar15 = (&FLOAT_2.0)[machine_1->machine_id * 2];
      }
      fVar1 = machine_1->stat_weight;
      fVar15 = FLOAT_0.8 * machine_1->const_float_2.0 * fVar15;
    }
    dVar14 = (double)fVar1;
    dVar9 = (double)fVar15;
    if ((machine_2->machine_state & FZ_MS_B30) == 0) {
      fVar15 = machine_2->const_float_2.0;
      fVar1 = machine_2->stat_weight;
    }
    else {
      fVar15 = FLOAT_1;
      if (machine_2->machine_id < 2) {
        fVar15 = (&FLOAT_2.0)[machine_2->machine_id * 2];
      }
      fVar1 = machine_2->stat_weight;
      fVar15 = FLOAT_0.8 * machine_2->const_float_2.0 * fVar15;
    }
    dVar13 = (double)fVar1;
    dVar11 = (double)fVar15;
    fVar15 = (machine_1->position_current).x - (machine_2->position_current).x;
    fVar1 = (machine_1->position_current).y - (machine_2->position_current).y;
    fVar2 = (machine_1->position_current).z - (machine_2->position_current).z;
    fVar15 = math_sqrt(fVar2 * fVar2 + fVar1 * fVar1 + fVar15 * fVar15);
    dVar10 = (double)fVar15;
    if (dVar10 <= dVar11 + dVar9 + (double)machine_1->speed_kmh / DOUBLE_216 +
                                   (double)machine_2->speed_kmh / DOUBLE_216) {
      update_machine_approach_vector(dVar10,machine_1,machine_2);
      update_machine_approach_vector(dVar10,machine_2,machine_1);
      fVar15 = (machine_1->position_old_dupe).x - (machine_1->position_current).x;
      fVar1 = (machine_1->position_old_dupe).y - (machine_1->position_current).y;
      fVar2 = (machine_1->position_old_dupe).z - (machine_1->position_current).z;
      fVar15 = math_sqrt(fVar2 * fVar2 + fVar1 * fVar1 + fVar15 * fVar15);
      if ((double)fVar15 <= DOUBLE_13.888888) {
        sweep_p0_a.x = (machine_1->position_old_dupe).x;
        sweep_p0_a.y = (machine_1->position_old_dupe).y;
        sweep_p0_a.z = (machine_1->position_old_dupe).z;
        local_1c4.x = (machine_1->velocity).x;
        local_1c4.y = (machine_1->velocity).y;
        local_1c4.z = (machine_1->velocity).z;
      }
      else {
        sweep_p0_a.x = (machine_1->position_current).x - (machine_1->position_old_dupe).x;
        sweep_p0_a.y = (machine_1->position_current).y - (machine_1->position_old_dupe).y;
        sweep_p0_a.z = (machine_1->position_current).z - (machine_1->position_old_dupe).z;
        vec3_set_length((double)FLOAT_13.88888,&sweep_p0_a,&sweep_p0_a);
        sweep_p0_a.x = (machine_1->position_current).x + sweep_p0_a.x;
        sweep_p0_a.y = (machine_1->position_current).y + sweep_p0_a.y;
        sweep_p0_a.z = (machine_1->position_current).z + sweep_p0_a.z;
        vec3_set_length((double)(float)(DOUBLE_13.888888 * dVar14),&machine_1->velocity,&local_1c4);
      }
      fVar15 = (machine_2->position_old_dupe).x - (machine_2->position_current).x;
      fVar1 = (machine_2->position_old_dupe).y - (machine_2->position_current).y;
      fVar2 = (machine_2->position_old_dupe).z - (machine_2->position_current).z;
      fVar15 = math_sqrt(fVar2 * fVar2 + fVar1 * fVar1 + fVar15 * fVar15);
      if ((double)fVar15 <= DOUBLE_13.888888) {
        sweep_p0_b.x = (machine_2->position_old_dupe).x;
        sweep_p0_b.y = (machine_2->position_old_dupe).y;
        sweep_p0_b.z = (machine_2->position_old_dupe).z;
        local_1d0.x = (machine_2->velocity).x;
        local_1d0.y = (machine_2->velocity).y;
        local_1d0.z = (machine_2->velocity).z;
      }
      else {
        sweep_p0_b.x = (machine_2->position_current).x - (machine_2->position_old_dupe).x;
        sweep_p0_b.y = (machine_2->position_current).y - (machine_2->position_old_dupe).y;
        sweep_p0_b.z = (machine_2->position_current).z - (machine_2->position_old_dupe).z;
        vec3_set_length((double)FLOAT_13.88888,&sweep_p0_b,&sweep_p0_b);
        sweep_p0_b.x = (machine_2->position_current).x + sweep_p0_b.x;
        sweep_p0_b.y = (machine_2->position_current).y + sweep_p0_b.y;
        sweep_p0_b.z = (machine_2->position_current).z + sweep_p0_b.z;
        vec3_set_length((double)(float)(DOUBLE_13.888888 * dVar13),&machine_2->velocity,&local_1d0);
      }
      bVar5 = swept_sphere_vs_swept_sphere
                        (dVar9,dVar11,&sweep_p0_a,&machine_1->position_current,&sweep_p0_b,
                         &machine_2->position_current,&hit_t,&local_238);
      if (bVar5) {
        dVar10 = (double)(float)(dVar9 + dVar11);
        hit_t = FLOAT_1 - hit_t;
        ray_scale(hit_t,&sweep_p0_a,&machine_1->position_current,&local_194);
        ray_scale(hit_t,&sweep_p0_b,&machine_2->position_current,&local_1a0);
        fVar15 = math_sqrt((local_194.z - local_1a0.z) * (local_194.z - local_1a0.z) +
                           (local_194.y - local_1a0.y) * (local_194.y - local_1a0.y) +
                           (local_194.x - local_1a0.x) * (local_194.x - local_1a0.x));
        dVar9 = (double)fVar15;
        bVar5 = false;
        if ((dVar9 < dVar10) && ((double)FLOAT_EPSILON < dVar9)) {
          bVar5 = true;
        }
        if (bVar5) {
          uVar8 = (int)machine_2->entrant_id + 0x1U & 0x1f;
          if ((((machine_1->unk_random_0x514 << uVar8 |
                (uint)machine_1->unk_random_0x514 >> 0x20 - uVar8) & 1) != 0) ||
             (uVar8 = (int)machine_1->entrant_id + 1U & 0x1f,
             ((machine_2->unk_random_0x514 << uVar8 |
              (uint)machine_2->unk_random_0x514 >> 0x20 - uVar8) & 1) != 0)) {
            bVar5 = false;
          }
        }
        else {
          machine_1->unk_random_0x514 =
               machine_1->unk_random_0x514 & ~(0x80000000U >> (int)machine_2->entrant_id);
          machine_2->unk_random_0x514 =
               machine_2->unk_random_0x514 & ~(0x80000000U >> (int)machine_1->entrant_id);
        }
        if (bVar5) {
          vStack_1dc.x = local_1a0.x - local_194.x;
          vStack_1dc.y = local_1a0.y - local_194.y;
          vStack_1dc.z = local_1a0.z - local_194.z;
          get_length_and_normalize(&vStack_1dc);
          vStack_200.z = FLOAT_0.5;
          fVar15 = FLOAT_0.5 * (float)((double)(float)((double)FLOAT_0.01 + dVar10) - dVar9);
          fVar1 = -fVar15;
          (machine_1->position_current).x = vStack_1dc.x * fVar1 + local_194.x;
          (machine_1->position_current).y = vStack_1dc.y * fVar1 + local_194.y;
          (machine_1->position_current).z = vStack_1dc.z * fVar1 + local_194.z;
          (machine_2->position_current).x = vStack_1dc.x * fVar15 + local_1a0.x;
          (machine_2->position_current).y = vStack_1dc.y * fVar15 + local_1a0.y;
          (machine_2->position_current).z = vStack_1dc.z * fVar15 + local_1a0.z;
          vStack_200.x = ((machine_1->position_current).x + (machine_2->position_current).x) *
                         vStack_200.z;
          vStack_200.y = ((machine_1->position_current).y + (machine_2->position_current).y) *
                         vStack_200.z;
          vStack_200.z = ((machine_1->position_current).z + (machine_2->position_current).z) *
                         vStack_200.z;
          dVar9 = prepare_impact_direction_info(machine_1,&uStack_150,&vStack_200);
          dVar10 = prepare_impact_direction_info(machine_2,&uStack_188,&vStack_200);
          if (dVar9 <= dVar10) {
            local_20c.x = -uStack_188.relative_dir_world.x;
            local_20c.y = -uStack_188.relative_dir_world.y;
            local_20c.z = -uStack_188.relative_dir_world.z;
          }
          else {
            local_20c.x = uStack_150.relative_dir_world.x;
            local_20c.y = uStack_150.relative_dir_world.y;
            local_20c.z = uStack_150.relative_dir_world.z;
          }
          fVar15 = math_sqrt(local_1c4.z * local_1c4.z +
                             local_1c4.y * local_1c4.y + local_1c4.x * local_1c4.x);
          dVar9 = (double)fVar15;
          fVar15 = FLOAT_0;
          if ((double)FLOAT_EPSILON < dVar9) {
            fVar15 = vec3_normalized_dot_product(&local_20c,&local_1c4);
            fVar15 = (float)(dVar9 * (double)(float)((double)fVar15 / dVar14));
          }
          dVar10 = (double)fVar15;
          fVar15 = math_sqrt(local_1d0.z * local_1d0.z +
                             local_1d0.y * local_1d0.y + local_1d0.x * local_1d0.x);
          dVar9 = (double)fVar15;
          fVar15 = FLOAT_0;
          if ((double)FLOAT_EPSILON < dVar9) {
            fVar15 = vec3_normalized_dot_product(&local_20c,&local_1d0);
            fVar15 = (float)(dVar9 * (double)(float)((double)fVar15 / dVar13));
          }
          fVar2 = FLOAT_800;
          fVar1 = FLOAT_0;
          dVar9 = (double)((FLOAT_2 * (float)(dVar10 - (double)fVar15)) / (float)(dVar14 + dVar13));
          machine_1->base_speed =
               machine_1->base_speed + FLOAT_800 * (float)((double)uStack_150.impact_axis_z * dVar9)
          ;
          machine_2->base_speed =
               machine_2->base_speed + fVar2 * (float)((double)uStack_188.impact_axis_z * dVar9);
          if (machine_1->base_speed < fVar1) {
            machine_1->base_speed = fVar1;
          }
          if (machine_2->base_speed < FLOAT_0) {
            machine_2->base_speed = FLOAT_0;
          }
          dVar11 = (double)(float)(dVar14 * dVar9);
          dVar12 = (double)(float)(-dVar13 * dVar9);
          dVar9 = scale_collision_impulse_and_damage(machine_1,machine_2->machine_state & FZ_MS_B10)
          ;
          dVar10 = scale_collision_impulse_and_damage
                             (machine_2,machine_1->machine_state & FZ_MS_B10);
          if ((machine_1->machine_state & FZ_MS_0HP) != 0) {
            dVar9 = (double)(float)(dVar9 * (double)FLOAT_1.5);
            dVar10 = (double)(float)(dVar10 * (double)FLOAT_1.2);
          }
          if ((machine_2->machine_state & FZ_MS_0HP) != 0) {
            dVar10 = (double)(float)(dVar10 * (double)FLOAT_1.5);
            dVar9 = (double)(float)(dVar9 * (double)FLOAT_1.2);
          }
          fVar15 = (float)(dVar10 * (double)(float)(dVar12 * dVar14));
          fVar1 = (float)(dVar9 * (double)(float)(dVar11 * dVar13));
          local_1e8.z = vStack_1dc.z * fVar15 -
                        FLOAT_0.95 * vStack_1dc.z * fVar15 * (machine_1->track_surface_normal).z;
          local_1e8.x = vStack_1dc.x * fVar15 -
                        FLOAT_0.95 * vStack_1dc.x * fVar15 * (machine_1->track_surface_normal).x;
          local_1e8.y = vStack_1dc.y * fVar15 -
                        FLOAT_0.95 * vStack_1dc.y * fVar15 * (machine_1->track_surface_normal).y;
          local_1f4.z = vStack_1dc.z * fVar1 -
                        FLOAT_0.95 * vStack_1dc.z * fVar1 * (machine_2->track_surface_normal).z;
          local_1f4.x = vStack_1dc.x * fVar1 -
                        FLOAT_0.95 * vStack_1dc.x * fVar1 * (machine_2->track_surface_normal).x;
          local_1f4.y = vStack_1dc.y * fVar1 -
                        FLOAT_0.95 * vStack_1dc.y * fVar1 * (machine_2->track_surface_normal).y;
          (machine_1->collision_response).x = local_1e8.x;
          (machine_1->collision_response).y = local_1e8.y;
          (machine_1->collision_response).z = local_1e8.z;
          (machine_2->collision_response).x = local_1f4.x;
          (machine_2->collision_response).y = local_1f4.y;
          (machine_2->collision_response).z = local_1f4.z;
          fVar15 = FLOAT_2.2;
          if (((machine_1->machine_state | machine_2->machine_state) &
              (FZ_MS_SIDEATTACKING|FZ_MS_SPINATTACKING)) != 0) {
            fVar15 = FLOAT_1.5;
          }
          dVar11 = (double)fVar15;
          dVar14 = dVar11;
          if ((machine_1->machine_state & FZ_MS_B30) != 0) {
            dVar14 = (double)FLOAT_1;
          }
          if ((machine_2->machine_state & FZ_MS_B30) != 0) {
            dVar11 = (double)FLOAT_1;
          }
          fVar15 = (machine_1->velocity).x;
          fVar1 = (machine_1->velocity).y;
          fVar2 = (machine_1->velocity).z;
          local_210 = (float)((double)local_1e8.z * dVar14);
          local_218 = (float)((double)local_1e8.x * dVar14);
          local_214 = (float)((double)local_1e8.y * dVar14);
          fVar15 = math_sqrt(fVar2 * fVar2 + fVar1 * fVar1 + fVar15 * fVar15);
          if ((FLOAT_0_1 < fVar15) &&
             (fVar15 = math_sqrt(local_1e8.z * local_1e8.z +
                                 local_1e8.y * local_1e8.y + local_1e8.x * local_1e8.x),
             FLOAT_0_1 < fVar15)) {
            fVar15 = vec3_normalized_dot_product(&machine_1->velocity,&local_1e8);
            if (FLOAT_0 < fVar15) {
              fVar15 = FLOAT_0;
            }
            fVar15 = FLOAT_1 + FLOAT_0.7 * fVar15;
            local_218 = local_218 * fVar15;
            local_214 = local_214 * fVar15;
            local_210 = local_210 * fVar15;
          }
          (machine_1->velocity).x = local_218 + local_1c4.x;
          (machine_1->velocity).y = local_214 + local_1c4.y;
          (machine_1->velocity).z = local_210 + local_1c4.z;
          fVar15 = (machine_2->velocity).x;
          fVar1 = (machine_2->velocity).y;
          fVar2 = (machine_2->velocity).z;
          local_210 = (float)((double)local_1f4.z * dVar11);
          local_218 = (float)((double)local_1f4.x * dVar11);
          local_214 = (float)((double)local_1f4.y * dVar11);
          fVar15 = math_sqrt(fVar2 * fVar2 + fVar1 * fVar1 + fVar15 * fVar15);
          if ((FLOAT_0_1 < fVar15) &&
             (fVar15 = math_sqrt(local_1f4.z * local_1f4.z +
                                 local_1f4.y * local_1f4.y + local_1f4.x * local_1f4.x),
             FLOAT_0_1 < fVar15)) {
            fVar15 = vec3_normalized_dot_product(&machine_2->velocity,&local_1f4);
            if (FLOAT_0 < fVar15) {
              fVar15 = FLOAT_0;
            }
            fVar15 = FLOAT_1 + FLOAT_0.7 * fVar15;
            local_218 = local_218 * fVar15;
            local_214 = local_214 * fVar15;
            local_210 = local_210 * fVar15;
          }
          (machine_2->velocity).x = local_218 + local_1d0.x;
          (machine_2->velocity).y = local_214 + local_1d0.y;
          (machine_2->velocity).z = local_210 + local_1d0.z;
          mtxa_push();
          uVar8 = machine_1->machine_state;
          bVar5 = false;
          bVar4 = false;
          if (((uVar8 & FZ_MS_B10) == 0) || ((machine_2->machine_state & FZ_MS_B10) == 0)) {
            bVar7 = false;
          }
          else {
            bVar7 = true;
          }
          bVar3 = true;
          bVar6 = true;
          if ((uVar8 & FZ_MS_B10) == 0) {
            if ((((machine_2->machine_state & FZ_MS_B10) != 0) &&
                ((uVar8 & (FZ_MS_SIDEATTACKING|FZ_MS_SPINATTACKING)) != 0)) &&
               ((machine_2->machine_state & (FZ_MS_SIDEATTACKING|FZ_MS_SPINATTACKING)) == 0)) {
              bVar6 = false;
            }
          }
          else if ((((machine_2->machine_state & FZ_MS_B10) == 0) &&
                   ((machine_2->machine_state & (FZ_MS_SIDEATTACKING|FZ_MS_SPINATTACKING)) != 0)) &&
                  ((uVar8 & (FZ_MS_SIDEATTACKING|FZ_MS_SPINATTACKING)) == 0)) {
            bVar3 = false;
          }
          copy_mtx_to_mtxa(&machine_1->basis_physical);
          vStack_224.x = vStack_1dc.x * FLOAT_NEG_0.5;
          vStack_224.y = vStack_1dc.y * FLOAT_NEG_0.5;
          vStack_224.z = vStack_1dc.z * FLOAT_NEG_0.5;
          mtxa_inverse_rotate_vec3(&vStack_224,&vStack_224);
          mtxa_inverse_rotate_vec3(&local_1e8,&local_230);
          machine_1->visual_roll = machine_1->visual_roll + local_230.x;
          machine_1->visual_pitch = machine_1->visual_pitch + local_230.z;
          fVar15 = math_sqrt(local_1e8.z * local_1e8.z +
                             local_1e8.y * local_1e8.y + local_1e8.x * local_1e8.x);
          dVar14 = (double)(float)((double)(float)(dVar10 * (double)(FLOAT_0.002 * fVar15)) / dVar9)
          ;
          if (bVar7) {
            dVar14 = (double)(float)(dVar14 * (double)FLOAT_0.001);
          }
          if ((machine_2->machine_state & FZ_MS_0HP) != 0) {
            dVar14 = (double)(float)(dVar14 * (double)FLOAT_0.3);
          }
          if (((bVar6) && (machine_1->car_hit_invincibility == 0)) &&
             (bVar6 = damage_machine(dVar14,machine_1), bVar6)) {
            bVar5 = true;
          }
          fz::g_unk_rumble_start(machine_1->unk_input_related_0x474,4,0xc);
          copy_mtx_to_mtxa(&machine_2->basis_physical);
          vStack_224.x = vStack_1dc.x * FLOAT_0.5;
          vStack_224.y = vStack_1dc.y * FLOAT_0.5;
          vStack_224.z = vStack_1dc.z * FLOAT_0.5;
          mtxa_inverse_rotate_vec3(&vStack_224,&vStack_224);
          mtxa_inverse_rotate_vec3(&local_1f4,&local_230);
          machine_2->visual_roll = machine_2->visual_roll + local_230.x;
          machine_2->visual_pitch = machine_2->visual_pitch + local_230.z;
          fVar15 = math_sqrt(local_1f4.z * local_1f4.z +
                             local_1f4.y * local_1f4.y + local_1f4.x * local_1f4.x);
          dVar9 = (double)(float)((double)(float)(dVar9 * (double)(FLOAT_0.002 * fVar15)) / dVar10);
          if (bVar7) {
            dVar9 = (double)(float)(dVar9 * (double)FLOAT_0.001);
          }
          if ((machine_1->machine_state & FZ_MS_0HP) != 0) {
            dVar9 = (double)(float)(dVar9 * (double)FLOAT_0.3);
          }
          if (((bVar3) && (machine_2->car_hit_invincibility == 0)) &&
             (bVar7 = damage_machine(dVar9,machine_2), bVar7)) {
            bVar4 = true;
          }
          if (((bVar5) &&
              (machine_killed_other_machine(machine_2), machine_2->unk_input_related_0x475 != 0xff))
             && ((machine_2->machine_state & (FZ_MS_COMPLETEDRACE_2_Q|FZ_MS_B10)) == 0)) {
            unk_probably_play_ko_sound(0xa9092100);
          }
          if (((bVar4) &&
              (machine_killed_other_machine(machine_1), machine_1->unk_input_related_0x475 != 0xff))
             && ((machine_1->machine_state & (FZ_MS_COMPLETEDRACE_2_Q|FZ_MS_B10)) == 0)) {
            unk_probably_play_ko_sound(0xa9092100);
          }
          fz::g_unk_rumble_start(machine_2->unk_input_related_0x474,4,0xc);
          if ((double)(float)(dVar14 + dVar9) <= DOUBLE_0.4) {
            if (DOUBLE_0.1 < (double)(float)(dVar14 + dVar9)) {
              fz::g_unk_rumble_start(machine_1->unk_input_related_0x474,3,9);
              fz::g_unk_rumble_start(machine_2->unk_input_related_0x474,3,9);
            }
          }
          else {
            fz::g_unk_rumble_start(machine_1->unk_input_related_0x474,2,9);
            fz::g_unk_rumble_start(machine_2->unk_input_related_0x474,2,9);
          }
          if ((machine_1->machine_state & FZ_MS_0HP) != 0) {
            machine_1->energy = FLOAT_0;
          }
          if ((machine_2->machine_state & FZ_MS_0HP) != 0) {
            machine_2->energy = FLOAT_0;
          }
          mtxa_pop();
          g_ret_collided = 1;
          machine_1->machine_state =
               machine_1->machine_state | (FZ_MS_JUSTHITVEHICLE_Q|FZ_MS_ACTIVE);
          machine_2->machine_state =
               machine_2->machine_state | (FZ_MS_JUSTHITVEHICLE_Q|FZ_MS_ACTIVE);
        }
        else {
          g_ret_collided = 0;
        }
      }
      else {
        if (local_238 == 0) {
          machine_1->unk_random_0x514 =
               machine_1->unk_random_0x514 & ~(0x80000000U >> (int)machine_2->entrant_id);
          machine_2->unk_random_0x514 =
               machine_2->unk_random_0x514 & ~(0x80000000U >> (int)machine_1->entrant_id);
        }
        g_ret_collided = 0;
      }
    }
    else {
      g_ret_collided = 0;
      machine_1->unk_random_0x514 =
           machine_1->unk_random_0x514 & ~(0x80000000U >> (int)machine_2->entrant_id);
      machine_2->unk_random_0x514 =
           machine_2->unk_random_0x514 & ~(0x80000000U >> (int)machine_1->entrant_id);
    }
  }
  else {
    g_ret_collided = 0;
  }
  _restgpr_24();
  return g_ret_collided;
}

